// SPDX-License-Identifier: MIT
pragma solidity 0.8.18;

contract MyToken {
    // Token details
    string public name;            // Token name
    string public symbol;          // Token symbol

    // Total supply and token balances
    uint256 public totalSupply;                // Total supply of tokens
    mapping(address => uint256) public balanceOf;    // Balances of token holders

    // Events
    event Transfer(address indexed from, address indexed to, uint256 value);  // Event emitted when tokens are transferred
    event Burn(address indexed from, uint256 value);                          // Event emitted when tokens are burned
    event Mint(address indexed to, uint256 value);                            // Event emitted when tokens are minted

    // Contract owner
    address public owner;

    // Modifier to allow only the contract owner to call certain functions
    modifier onlyOwner() {
        require(msg.sender == owner, "Only the contract owner can call this function");
        _;
    }

    // Constructor to initialize the token with an initial supply
    constructor(string memory _name, string memory _symbol, uint256 _totalSupply) {
        name = _name;
        symbol = _symbol;
        totalSupply = _totalSupply;
        balanceOf[msg.sender] = _totalSupply;  // Assign the total supply to the contract owner
        owner = msg.sender;                    // Set the contract owner
    }

    // Function to transfer tokens from one address to another
    function transfer(address _to, uint256 _value) external {
        require(balanceOf[msg.sender] >= _value, "Insufficient balance");  // Check if the sender has enough tokens
        balanceOf[msg.sender] -= _value;        // Deduct tokens from the sender's balance
        balanceOf[_to] += _value;                // Add tokens to the recipient's balance
        emit Transfer(msg.sender, _to, _value);  // Emit a transfer event
    }

    // Function to burn tokens from the caller's address
    function burn(uint256 _value) external {
        require(balanceOf[msg.sender] >= _value, "Insufficient balance");  // Check if the caller has enough tokens
        balanceOf[msg.sender] -= _value;        // Deduct tokens from the caller's balance
        totalSupply -= _value;                   // Decrease the total supply of tokens
        emit Burn(msg.sender, _value);           // Emit a burn event
    }

    // Function to mint new tokens and assign them to a specified address
    function mint(address _to, uint256 _value) external onlyOwner {
        balanceOf[_to] += _value;                 // Add tokens to the recipient's balance
        totalSupply += _value;                    // Increase the total supply of tokens
        emit Mint(_to, _value);                    // Emit a mint event
    }
}
