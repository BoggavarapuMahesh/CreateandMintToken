// SPDX-License-Identifier: MIT
pragma solidity 0.8.18;

contract MyToken {
    string public name;                       // Token name
    string public symbol;                     // Token symbol

    uint256 public totalSupply;                // Total supply of tokens
    mapping(address => uint256) public balanceOf;    // Balances of token holders

    // Events
    event Transfer(address indexed from, address indexed to, uint256 value);  // Event emitted when tokens are transferred
    event Burn(address indexed from, uint256 value);                          // Event emitted when tokens are burned
    event Mint(address indexed to, uint256 value);                            // Event emitted when tokens are minted

    address public owner;                      // The owner of the contract

    // Modifier to allow only the contract owner to call certain functions
    modifier onlyOwner() {
        require(msg.sender == owner, "Only the contract owner can call this function");
        _;
    }

    // Constructor to initialize the token with an initial supply
    constructor(string memory _name, string memory _symbol, uint256 _initialSupply) {
        name = _name;
        symbol = _symbol;
        totalSupply = _initialSupply;
        balanceOf[msg.sender] = _initialSupply;  // Assign the initial supply to the contract owner
        owner = msg.sender;                      // Set the contract owner
    }

    // Function to transfer tokens from the sender's address to another address
    function transfer(address _to, uint256 _value) public returns (bool) {
        require(amount > 0, "Amount must be greater than 0");
        require(to != address(0), "Recipient address must not be 0");
        require(balanceOf[msg.sender] >= _value, "Insufficient balance");

        balanceOf[msg.sender] -= _value;
        balanceOf[to] += _value;

        emit Transfer(msg.sender, to, _value);
        return true;
    }

    // Function to burn tokens from the sender's address
    function burn(uint256 _value) public {
        require(balanceOf[msg.sender] >= _value, "Insufficient balance");

        balanceOf[msg.sender] -= _value;
        totalSupply -= _value;

        emit Burn(msg.sender, _value);
        emit Transfer(msg.sender, address(0), _value);  // Emit a transfer event to address(0) indicating the tokens are burned
    }

    // Function to mint new tokens and assign them to a specified address
    function mint(address _to, uint256 _value) public onlyOwner {
        require(_to != address(0), "Invalid recipient");            // Check if the recipient address is valid

        balanceOf[_to] += _value;                 // Add tokens to the recipient's balance
        totalSupply += _value;                    // Increase the total supply of tokens

        emit Mint(_to, _value);                    // Emit a mint event
        emit Transfer(address(0), _to, _value);    // Emit a transfer event from address(0) to the recipient
    }

    // ERC20-compliant functions
    function totalSupply() public view returns (uint256) {
        return totalSupply;
    }

    function balanceOf(address account) public view returns (uint256) {
        return balanceOf[account];
    }

    function transfer(address to, uint256 amount) public returns (bool) {
        return _transfer(msg.sender, to, amount);
    }

    function approve(address spender, uint256 amount) public returns (bool) {
        return _approve(msg.sender, spender, amount);
    }

    function allowance(address owner, address spender) public view returns (uint256) {
        return allowance[owner][spender];
    }

    function transferFrom(address from, address to, uint256 amount) public returns (bool) {
        return _transfer(from, to, amount);
    }

